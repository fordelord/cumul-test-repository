import { LitElement, PropertyValues } from 'lit';
import * as SharedLib from '@cumul.io/shared-cumulio-dashboard';
import { DashboardContentParams, DashboardInputs, ES6CumulioDashboard } from '@cumul.io/shared-cumulio-dashboard';
export declare class CumulioDashboard extends LitElement implements ES6CumulioDashboard {
    container: HTMLElement;
    iframe: HTMLIFrameElement;
    dashboardId?: DashboardInputs['dashboardId'];
    dashboardSlug?: DashboardInputs['dashboardSlug'];
    itemId?: DashboardInputs['itemId'];
    language: DashboardInputs['language'];
    screenMode: DashboardInputs['screenMode'];
    switchScreenModeOnResize: boolean;
    editMode: DashboardInputs['editMode'];
    mainColor?: DashboardInputs['mainColor'];
    accentColor?: DashboardInputs['accentColor'];
    authToken?: DashboardInputs['authToken'];
    authKey?: DashboardInputs['authKey'];
    loaderBackground?: DashboardInputs['loaderBackground'];
    loaderFontColor?: DashboardInputs['loaderFontColor'];
    loaderSpinnerColor?: DashboardInputs['loaderSpinnerColor'];
    loaderSpinnerBackground?: DashboardInputs['loaderSpinnerBackground'];
    appServer?: DashboardInputs['appServer'];
    timezoneId?: DashboardInputs['timezoneId'];
    apiHost?: DashboardInputs['apiHost'];
    itemDimensions: DashboardInputs['itemDimensions'];
    _containerId: string;
    _iframeId: string;
    params: DashboardContentParams;
    _iframeUrl?: string;
    iframeLoaded: boolean;
    promises: SharedLib.DashboardPromises;
    iframeStyle: SharedLib.IframeStyles;
    _containerStyle: SharedLib.ContainerStyles;
    _loaderStyle: SharedLib.LoaderStyles;
    _lcStyle: SharedLib.LcStyles;
    _loadingCircleStyle: SharedLib.PlStyles;
    _containerLoaderStyle: SharedLib.ContainerLoaderStyles;
    _loaderMsg: string;
    containerWidth?: number;
    dimensions?: unknown;
    currentScreenMode?: string;
    _itemEmbedding: boolean;
    browserError: boolean;
    browserErrorMsg: string;
    dashboardError: boolean;
    browserNotSupported: any[];
    VERSION: string;
    _loadTimeoutHandle?: number;
    _onResize: () => void;
    loaderSize: number;
    borderWidth: number;
    minHeight: number;
    iframeHeight?: string;
    iframeWidth?: string;
    _resizeObserver: ResizeObserver;
    constructor(inputParameters?: Record<keyof CumulioDashboard, any>);
    private setInputParameters;
    connectedCallback(): void;
    disconnectedCallback(): void;
    firstUpdated(): void;
    updated(changedProperties: PropertyValues): void;
    _setOptions(): SharedLib.DashboardContentParams;
    _updateIframeUrl(): void;
    _setupLoader(): void;
    _displayError(): void;
    _calculateDimAfterDashboardLoaded(): void;
    _loaderStyles(): void;
    static get styles(): import("lit").CSSResult[];
    render(): import("lit-html").TemplateResult<1>;
    getDashboards(): Promise<CumulioDashboard[]>;
    getData(itemId: string): Promise<SharedLib.ItemData>;
    getFilters(): Promise<SharedLib.Filter[]>;
    setFilters(itemId: string, filters: SharedLib.FilterInput): Promise<SharedLib.SetFilters>;
    setAuthorization(key: string, token: string): Promise<void>;
    refreshData(itemId?: string): Promise<void>;
    reloadDashboard(): Promise<void>;
    exportDashboard(format?: SharedLib.ExportType): Promise<SharedLib.ExportDashboard>;
    getAccessibleDashboards(): Promise<SharedLib.AccessibleDashboard[]>;
    setEditMode(editMode?: SharedLib.DashboardEditMode): Promise<SharedLib.SetEditMode>;
    setPreview(preview: boolean): Promise<SharedLib.SetPreview>;
}
