import { Filter } from './filters.model';
export declare type ScreenMode = 'mobile' | 'tablet' | 'desktop' | 'largeScreen' | 'fixed' | 'auto';
export declare type CommonReturnType = {
    dashboardId?: string;
    dashboardSlug?: string;
    integrationId?: string;
    itemId?: string;
    language?: string;
    name?: string;
    requestId?: string;
    screenMode?: ScreenMode;
    type?: string;
    error?: boolean;
    msg?: string;
};
export declare type ExportDashboard = {
    type: 'export';
} & CommonReturnType;
export declare type AccessibleDashboard = {
    accessibleBy?: {
        model?: 'User' | 'Group' | 'Integration';
        id?: string;
        name?: string;
    }[];
    accessRights?: {
        flagRead?: boolean;
        flagUse?: boolean;
        flagModify?: boolean;
        flagOwn?: boolean;
    };
    id?: string;
    modifiedAt?: string;
    name?: string;
    slug?: string | null;
    tags: string[];
};
export declare type ItemData = any[];
export declare type DashboardEditMode = 'editFull' | 'editLimited' | 'view';
export declare type SetEditMode = {
    type?: 'setEditMode';
    editMode?: DashboardEditMode;
} & CommonReturnType;
export declare type SetFilters = {
    filters?: Filter[];
} & CommonReturnType;
export declare type SetPreview = {
    type: 'setPreview';
    preview?: boolean;
} & CommonReturnType;
export declare type DashboardPromises = Record<string, {
    resolve: (value?: unknown | PromiseLike<unknown>) => void;
    reject: (reason: any) => void;
}>;
export declare type BrowserCheckKey = 'svg' | 'flexbox' | 'postMessage';
export interface DashboardInputs {
    appServer?: string;
    apiHost?: string;
    itemId?: string;
    mainColor?: string;
    accentColor?: string;
    language?: string;
    editMode?: DashboardEditMode;
    screenMode?: ScreenMode;
    switchScreenModeOnResize?: boolean;
    dashboardId?: string;
    dashboardSlug?: string;
    itemDimensions?: {
        width: number | 'auto';
        height: number | 'auto';
    };
    timezoneId?: string;
    loaderBackground?: string;
    loaderFontColor?: string;
    loaderSpinnerColor?: string;
    loaderSpinnerBackground?: string;
    authKey?: string;
    authToken?: string;
}
export interface DashboardContentParams extends Exclude<DashboardInputs, 'authKey' | 'authToken' | 'loaderBackground' | 'loaderFontColor' | 'loaderSpinnerColor' | 'loaderSpinnerBackground'> {
    key?: DashboardInputs['authKey'];
    token?: DashboardInputs['authToken'];
    itemEmbedding?: boolean;
    loaderBackground?: DashboardInputs['loaderBackground'];
    loaderFontColor?: DashboardInputs['loaderFontColor'];
    loaderSpinnerColor?: DashboardInputs['loaderSpinnerColor'];
    loaderSpinnerBackground?: DashboardInputs['loaderSpinnerBackground'];
    error?: boolean;
    container?: string;
}
