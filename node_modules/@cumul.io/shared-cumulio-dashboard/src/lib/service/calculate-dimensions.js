import { _handleError } from '../helpers/error';
import { EXTENTS } from '../helpers/extents';
import { cloneDeep } from '../helpers/utils';
// - setCalculatedDimensions: based on parameters & received dimensions per screenMode
// calculates the best screenMode & currentWidth & currentHeight
export const _setCalculatedDimensions = (dashboardComponent) => {
    if (!dashboardComponent.dimensions) {
        dashboardComponent.params.error = true;
        _handleError('Got no valid dimensions.', dashboardComponent.params);
        // return dashboardComponent.params;
    }
    const available = [];
    let currentMode = '';
    let currentWidth = 0;
    let currentHeight = 0;
    if (!dashboardComponent.params.switchScreenModeOnResize &&
        dashboardComponent.currentScreenMode) {
        dashboardComponent.params.screenMode = dashboardComponent.currentScreenMode;
    }
    const dimensionKeys = Object.keys(dashboardComponent.dimensions);
    // if fixed
    if (dashboardComponent.dimensions &&
        dimensionKeys &&
        dimensionKeys[0] === 'fixed') {
        currentMode = 'fixed';
        currentWidth = dashboardComponent.dimensions.fixed[0];
        currentHeight = dashboardComponent.dimensions.fixed[1];
    }
    // else calculate
    else {
        if (dashboardComponent.params.itemEmbedding) {
            // for item embedding, make sure all screenModes exist
            const order = ['mobile', 'tablet', 'desktop', 'largeScreen'];
            const firstMatch = dimensionKeys[0];
            let match = cloneDeep(firstMatch);
            for (const element of order) {
                const found = dimensionKeys.find((v) => v === element);
                if (!found)
                    dashboardComponent.dimensions[element] =
                        dashboardComponent.dimensions[match];
                else
                    match = cloneDeep(found);
            }
        }
        for (const d of dimensionKeys) {
            if (['mobile', 'tablet', 'desktop', 'largeScreen'].includes(d)) {
                const screenMode = EXTENTS.find((s) => s.mode === d);
                screenMode.height = dashboardComponent.dimensions[d][1] || 50;
                available.push(screenMode);
            }
        }
        // check if specified is in available -> if not set to auto
        if (!available
            .map((d) => d.mode)
            .includes(dashboardComponent.params.screenMode))
            dashboardComponent.params.screenMode = 'auto';
        // auto calc screenMode that fits & set its width using the available width
        if (dashboardComponent.params.screenMode === 'auto') {
            available.sort((a, b) => ['mobile', 'tablet', 'desktop', 'largeScreen'].indexOf(a.mode) -
                ['mobile', 'tablet', 'desktop', 'largeScreen'].indexOf(b.mode));
            for (const d of available) {
                if (dashboardComponent.params.itemEmbedding &&
                    dashboardComponent.params.itemDimensions &&
                    dashboardComponent.params.itemDimensions.width !== 'auto' &&
                    dashboardComponent.params.itemDimensions.height === 'auto') {
                    if (d.width[0] < dashboardComponent.params.itemDimensions.width) {
                        currentMode = d.mode;
                        currentWidth = Number.parseInt(dashboardComponent.params.itemDimensions.width, 10);
                        currentHeight = dashboardComponent.dimensions[currentMode][1];
                    }
                }
                else {
                    if (d.width[0] < dashboardComponent.containerWidth) {
                        currentMode = d.mode;
                        if (dashboardComponent.params.itemEmbedding) {
                            // item embedding
                            currentWidth =
                                dashboardComponent.params.itemDimensions &&
                                    dashboardComponent.params.itemDimensions.width &&
                                    dashboardComponent.params.itemDimensions.width !== 'auto'
                                    ? Number.parseInt(dashboardComponent.params.itemDimensions.width, 10)
                                    : Math.min(dashboardComponent.containerWidth, d.width[1]);
                            currentHeight =
                                dashboardComponent.params.itemDimensions &&
                                    dashboardComponent.params.itemDimensions.height &&
                                    dashboardComponent.params.itemDimensions.height !== 'auto'
                                    ? Number.parseInt(dashboardComponent.params.itemDimensions.height, 10)
                                    : dashboardComponent.dimensions[currentMode][1];
                            if (dashboardComponent.params.itemDimensions &&
                                dashboardComponent.params.itemDimensions.width !== 'auto' &&
                                dashboardComponent.params.itemDimensions.height === 'auto') {
                                currentWidth = Number.parseInt(dashboardComponent.params.itemDimensions.width, 10);
                                currentHeight = dashboardComponent.dimensions[currentMode][1];
                            }
                        }
                        else {
                            // normal dashboard embedding
                            currentWidth = Math.max(Math.min(d.width[1], dashboardComponent.containerWidth), d.width[0]);
                            currentHeight = d.height;
                        }
                    }
                }
            }
        }
        // set to screenMode and check if width fits in available width
        else {
            const chosenMode = available.find((d) => d.mode === dashboardComponent.params.screenMode);
            currentMode = dashboardComponent.params.screenMode;
            currentWidth = Math.max(Math.min(chosenMode.width[1], dashboardComponent.containerWidth), chosenMode.width[0]);
            currentHeight = chosenMode.height;
            if (dashboardComponent.params.itemEmbedding) {
                // item embedding
                if (dashboardComponent.params.itemDimensions &&
                    dashboardComponent.params.itemDimensions.width &&
                    dashboardComponent.params.itemDimensions.width !== 'auto') {
                    currentWidth = Number.parseInt(dashboardComponent.params.itemDimensions.width, 10);
                }
                if (dashboardComponent.params.itemDimensions &&
                    dashboardComponent.params.itemDimensions.height &&
                    dashboardComponent.params.itemDimensions.height !== 'auto') {
                    currentHeight = Number.parseInt(dashboardComponent.params.itemDimensions.height, 10);
                }
            }
        }
        // if no available mode is found, take the lowest one
        if (!currentMode && available.length > 0) {
            currentMode = available[0].mode;
            currentWidth = available[0].width[0];
            currentHeight = available[0].height;
        }
    }
    dashboardComponent.currentScreenMode = currentMode;
    const style = {};
    style.height = currentHeight === 0 ? '100%' : `${String(currentHeight)}px`;
    style.width = currentWidth === 0 ? '100%' : `${String(currentWidth)}px`;
    style.opacity = 1;
    // Set dimensions to 100% width and height of container if we're in edit mode
    if (['editFull', 'editLimited'].includes(dashboardComponent.params.editMode)) {
        style.height = '100%';
        style.width = '100%';
    }
    else if (dashboardComponent.params.itemEmbedding &&
        dashboardComponent.params.itemDimensions) {
        style.height =
            dashboardComponent.params.itemDimensions.height === 'auto'
                ? style.height
                : `${String(dashboardComponent.params.itemDimensions.height).replace('px', '')}px`;
        style.width =
            dashboardComponent.params.itemDimensions.width === 'auto'
                ? style.width
                : `${String(dashboardComponent.params.itemDimensions.width).replace('px', '')}px`;
    }
    else {
        style.height = currentHeight === 0 ? '100%' : `${String(currentHeight)}px`;
        style.width = currentWidth === 0 ? '100%' : `${String(currentWidth)}px`;
    }
    dashboardComponent.currentScreenMode = currentMode;
    dashboardComponent.iframeStyle = style;
};
